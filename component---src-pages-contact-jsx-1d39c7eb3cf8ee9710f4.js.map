{"version":3,"file":"component---src-pages-contact-jsx-1d39c7eb3cf8ee9710f4.js","mappings":"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","sources":["webpack://eric-lugo-dev-blog/./src/components/ControlledInput.jsx","webpack://eric-lugo-dev-blog/./src/components/ContactCard.jsx","webpack://eric-lugo-dev-blog/./src/lib/util.js","webpack://eric-lugo-dev-blog/./src/pages/contact.jsx"],"sourcesContent":["import React from \"react\"\nimport { useState, forwardRef } from \"react\"\n\n\nconst ControlledInput = forwardRef(function ControlledInput(props, ref) {\n  const { label, id, value=\"\", onChange, isTextArea, ...otherProps } = props\n  const [text, setText] = useState(value)\n\n  function update(e) {\n    setText(e.target.value)\n    if (typeof onChange === \"function\") {\n      onChange(e)\n    }\n  }\n\n  if (!!isTextArea) return (\n    <div className=\"form-item\" data-name={id}>\n      <textarea className=\"form-field\" ref={ref} id={id} value={text} data-value={text} onChange={update} {...otherProps}></textarea>\n      <label className=\"form-label\" htmlFor={id}>{label}</label>\n    </div>\n  )\n  else return (\n    <div className=\"form-item\" data-name={id}>\n      <input className=\"form-field\" ref={ref} id={id} value={text} data-value={text} onChange={update} {...otherProps} />\n      <label className=\"form-label\" htmlFor={id}>{label}</label>\n    </div>\n  )\n})\n\n\nexport default ControlledInput\n","import React from \"react\"\nimport { useState, useRef } from \"react\"\n\nimport ControlledInput from \"./ControlledInput\"\nimport { capitalize, validateContactData } from \"../lib/util\"\n\nimport \"../sass/components/ContactCard.scss\"\n\n\n/*\n*  _honey is a honeypot field to catch scrapers and help avoid spam.\n*  with honeypot enabled, _captcha can be disabled with 'false' value.\n*  _next gives formsubmit.co a redirect address for successful submissions.\n*  _subject is a convenience field to help with creating responses.\n*/\nconst ContactCard = () => {\n  const messageDetailModel = {\n    Name: '',\n    Email: '',\n    PhoneNo: '',\n    Message: '',\n  }\n\n  const [details, setDetails] = useState(messageDetailModel) // details object\n  const [validationArray, setValidationArray] = useState([]) // validation data array for displaying errors\n  const formValidateRef = useRef([]) // reference for form validation handling\n  const { Name, Email, PhoneNo, Message } = details // destructure the model values for ease\n\n  /*\n  * input change handling, for ease.\n  * destructure input, store previous values, and update with input value only.\n  */\n  const onInputChange = (e) => {\n    const { name, value } = e.target\n    setDetails((prev) => ({ ...prev, [name]:value }))\n  }\n\n  const ValidateData = () => {\n    const results = validateContactData(formValidateRef)\n    results.hasErrors && setValidationArray(results.newArray)\n  }\n\n  return (\n    <div className=\"contactCard\">\n      <h1>Contact Me</h1>\n\n      {!!validationArray.length && (\n        <section className=\"warningPanel\">\n          <h2><span className=\"small\">⚠️</span> WARNING <span className=\"small\">⚠️</span></h2>\n          <ul>\n            {validationArray.map((entry, i) => <li key={i}>{capitalize(entry.ErrorMsg)}</li>)}\n          </ul>\n        </section>\n      )}\n\n      <form className=\"contactForm\" action=\"https://formsubmit.co/0c1b34ecdf86dfe2c73799774323ff11\" method=\"POST\">\n\n        {/* HONEYPOT */}\n        <input type=\"text\" name=\"_honey\" style={{ display: \"none\" }} />\n\n        {/* DISABLE CAPTCHA */}\n        <input type=\"hidden\" name=\"_captcha\" value=\"false\" />\n\n        <input type=\"hidden\" name=\"_next\" value=\"https://ericlugo.dev/thanks\" />\n        <input type=\"hidden\" name=\"_subject\" value=\"Thanks for the Message!\" />\n\n        <ControlledInput ref={el => formValidateRef.current[0]=el} label=\"Your Name *\" id=\"name\" name=\"name\" type=\"text\" value={Name} onChange={e => onInputChange(e)} required />\n\n        <ControlledInput ref={el => formValidateRef.current[1]=el} label=\"Phone Number\" id=\"phone\" name=\"phone&nbsp;number\" type=\"tel\" value={PhoneNo} onChange={e => onInputChange(e)} />\n\n        <ControlledInput ref={el => formValidateRef.current[2]=el} label=\"Email Address *\" id=\"email\" name=\"email\" type=\"email\" value={Email} onChange={e => onInputChange(e)} required />\n\n        <ControlledInput ref={el => formValidateRef.current[3]=el} label=\"Your Message *\" isTextArea={true} id=\"message\" name=\"message\" rows=\"3\" value={Message} onChange={e => onInputChange(e)} required></ControlledInput>\n\n        <input className=\"form-submit\" id=\"submit\" type=\"submit\" value=\"Send\" onClick={ValidateData} />\n\n      </form>\n    </div>\n  )\n}\n\n\nexport default ContactCard\n","/*\n* capitalize all words in a given set of text if > 3 characters.\n*/\nexport const capitalize = text => (\n  text\n    .toLowerCase()\n    .split(\" \")\n    .map(word => word.length > 3 ? word[0].toUpperCase()+word.substr(1) : word)\n    .join(\" \")\n)\n\n\n/*\n* check that required fields are present *phone not required*.\n* if field is empty add error message and continue loop.\n* if phone, check that not empty and validate.\n* if email and passed presence check, validate.\n*/\nexport const validateContactData = (formValidateRef) => {\n  const tempArray = []\n  let re = undefined\n\n  for (let i = 0; i < formValidateRef.current.length; i++) {\n    \n    // presence check\n    if (formValidateRef.current[i].id !== \"phone\" && !formValidateRef.current[i].value) {\n      tempArray.push({ ErrorMsg: formValidateRef.current[i].name + ' is required' })\n      continue\n    }\n\n    // phone validation\n    if (formValidateRef.current[i].id === \"phone\") {\n      // phone validation courtesy of https://regex101.com/r/wZ4uU6/1\n      // slight modification made to allow extension numbers in matching\n      re = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?/\n      if (!!formValidateRef.current[i].value && !formValidateRef.current[i].value.match(re)) {\n        tempArray.push({ ErrorMsg: 'Please make sure to list your ' + formValidateRef.current[i].name + ' in a standard format such as \"+# ####-###-####\"' })\n        continue\n      }\n    }\n    // email validation\n    else if (formValidateRef.current[i].id === \"email\") {\n      // email validation courtesy of https://regex101.com/r/mX1xW0/1\n      re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n      if (!re.test(formValidateRef.current[i].value)) {\n        tempArray.push({ ErrorMsg: formValidateRef.current[i].name + ' needs to match the format \"email@domain.tld\"' })\n        continue\n      }\n    }\n  }\n\n  return {\n    hasErrors: !!tempArray.length,\n    newArray: tempArray,\n  }\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport PrimaryLayout from \"../layout/Primary\"\nimport ContactCard from \"../components/ContactCard\"\n\n\nconst ContactPage = () => {\n  return (\n    <PrimaryLayout className=\"contact\" withNav={true}>\n      <Link className=\"directoryLink\" to={\"/\"}>&lt; Go back Home</Link>\n      <ContactCard />\n    </PrimaryLayout>\n  )\n}\n\n\nexport default ContactPage\n\n\nexport const Head = () => <title>Contact Me</title>\n"],"names":["forwardRef","props","ref","label","id","value","onChange","isTextArea","otherProps","text","setText","useState","update","e","target","React","className","Object","assign","htmlFor","ContactCard","details","setDetails","Name","Email","PhoneNo","Message","validationArray","setValidationArray","formValidateRef","useRef","onInputChange","name","prev","length","map","entry","i","key","ErrorMsg","toLowerCase","split","word","toUpperCase","substr","join","action","method","type","style","display","ControlledInput","el","current","required","rows","onClick","ValidateData","results","tempArray","re","match","push","test","hasErrors","newArray","validateContactData","ContactPage","PrimaryLayout","withNav","Link","to","Head"],"sourceRoot":""}